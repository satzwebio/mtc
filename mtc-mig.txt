h1. OpenShift Cluster Migration using MTC (Migration Toolkit for Containers)

h2. Overview
This guide outlines the step-by-step process to migrate applications with Persistent Volume Claims (PVCs) from *Cluster-A (Source)* to *Cluster-B (Destination)* using *Direct Volume Migration (DVM)* in *Red Hat OpenShift Migration Toolkit for Containers (MTC)*. This migration does not require a third cluster for intermediate storage.

h2. Architecture
- *Cluster-A (Source):* Hosts the application and PVCs.
- *Cluster-B (Destination):* The target cluster for migration.
- *MTC is installed on Cluster-B* to manage the migration process.
- *Direct Volume Migration (DVM)* is used for direct data transfer between clusters using Rsync over SSH.

h2. Prerequisites
* Ensure both clusters are reachable over the network.
* OpenShift 4.x is installed on both clusters.
* MTC is installed on Cluster-B.
* Proper Service Account and RBAC roles are configured.
* Firewall rules allow SSH (port 22) for Rsync between clusters.

h2. Migration Steps

h3. Step 1: Install MTC on Cluster-B
```sh
oc apply -f mtc-operator.yaml  # Install MTC Operator
```

h3. Step 2: Create Service Accounts & Grant Permissions
Create a *Service Account (SA)* for migration on both clusters.

h4. Create Service Account in Cluster-A & Cluster-B
```yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: migration-sa
  namespace: openshift-migration
```
```sh
oc apply -f migration-sa.yaml
```

h4. Grant Cluster-Admin Role to SA
```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: migration-sa-clusterrolebinding
subjects:
  - kind: ServiceAccount
    name: migration-sa
    namespace: openshift-migration
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
```
```sh
oc apply -f migration-sa-clusterrolebinding.yaml
```

h3. Step 3: Extract Service Account Token from Cluster-A
```sh
oc sa get-token migration-sa -n openshift-migration
```
*Copy the output token and store it in Cluster-B as a secret.*

h3. Step 4: Store Cluster-A Token in Cluster-B
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: cluster-a-sa-token
  namespace: openshift-migration
type: Opaque
data:
  token: <base64-encoded-token>
```
```sh
echo -n "your-cluster-a-token" | base64  # Encode the token
oc apply -f cluster-a-sa-secret.yaml
```

h3. Step 5: Register Clusters in MTC (on Cluster-B)

h4. Register Cluster-A (Source) in MTC
```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigCluster
metadata:
  name: cluster-a
  namespace: openshift-migration
spec:
  isHostCluster: false
  url: "https://api.cluster-a.openshift.example.com:6443"
  serviceAccountSecretRef:
    name: cluster-a-sa-token
    namespace: openshift-migration
  insecure: false
```
```sh
oc apply -f cluster-a-migcluster.yaml
```

h4. Register Cluster-B (Destination) in MTC
```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigCluster
metadata:
  name: cluster-b
  namespace: openshift-migration
spec:
  isHostCluster: true
  url: "https://api.cluster-b.openshift.example.com:6443"
  serviceAccountSecretRef:
    name: cluster-b-sa-token
    namespace: openshift-migration
  insecure: false
```
```sh
oc apply -f cluster-b-migcluster.yaml
```

h3. Step 6: Verify Cluster Connectivity
```sh
oc get migcluster -n openshift-migration
```
*Expected Output:*
```
NAME         READY
cluster-a    True
cluster-b    True
```

h3. Step 7: Create Migration Plan
```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigPlan
metadata:
  name: direct-migration-plan
  namespace: openshift-migration
spec:
  migClusterRef:
    name: cluster-b
    namespace: openshift-migration
  namespaces:
    - demo
  persistentVolumes:
    - name: demo-pvc
      capacity: 10Gi
      storageClass: odf-ceph-rbd
      supported: true
      selection:
        action: direct  # Direct Volume Migration (DVM)
```
```sh
oc apply -f direct-migplan.yaml
```

h3. Step 8: Run the Final Migration
```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigMigration
metadata:
  name: direct-migration
  namespace: openshift-migration
spec:
  migPlanRef:
    name: direct-migration-plan
    namespace: openshift-migration
  stage: false
  quiescePods: true
  keepAnnotations: true
  rollback: false
  verify: true
```
```sh
oc apply -f direct-migmigration.yaml
```

h3. Step 9: Verify Migration Status
```sh
oc get migmigration -n openshift-migration
```
*Expected Output:*
```
NAME                STATUS      PHASE
direct-migration    Completed   FinalMigration
```

h2. Success! The application and PVCs are now migrated to Cluster-B!

h2. Troubleshooting
| Issue | Solution |
|--------|----------|
| MigCluster is not ready | Check SA token and connectivity between clusters |
| Rsync pods are not starting | Ensure SSH (port 22) is open between clusters |
| PVCs are not binding in Cluster-B | Check StorageClass mapping |

---
*Your migration from Cluster-A to Cluster-B using Direct Volume Migration (DVM) is now complete!* ðŸš€

